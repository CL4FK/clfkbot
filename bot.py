from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# üîê –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7369403731:AAFCd0gQQmOEDnvdXp9t0CuCY8K3QYR-djE"

# üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
REQUIRED_CHANNELS = ["@CLFK4"]  # ‚Üê –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ

# üîó –°–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª (—á–µ—Ä–µ–∑ join link)
PRIVATE_CHANNEL_LINK = "https://t.me/+5ASvs47WQxU4YTE6"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]
    channel_list = "\n".join([f"üëâ {ch}" for ch in REQUIRED_CHANNELS])
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n\n{channel_list}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    not_subscribed = []

    for channel in REQUIRED_CHANNELS:
        try:
            member = await context.bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                not_subscribed.append(channel)
        except:
            not_subscribed.append(channel)

    if not not_subscribed:
        # –í—Å–µ –æ–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
        join_button = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=PRIVATE_CHANNEL_LINK)]]
        await query.edit_message_text(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=InlineKeyboardMarkup(join_button)
        )
    else:
        # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤
        retry_button = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")]]
        channels_text = "\n".join([f"‚ùó –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {ch}" for ch in not_subscribed])
        await query.edit_message_text(
            f"–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞:\n\n{channels_text}",
            reply_markup=InlineKeyboardMarkup(retry_button)
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))
    app.run_polling()